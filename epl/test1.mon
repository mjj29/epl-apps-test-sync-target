
using com.apama.cumulocity.IncomingREST;
using com.apama.cumulocity.IncomingRESTResponse;

monitor SmartRuleConcurrencyTester_1 {

    sequence <string> Methods := ["PUT", "GET", "PUT", "GET", "PUT", "DELETE", "GET"];
    action onload {

        spawn responseListener() to context("foo1");

        IncomingREST request := new IncomingREST;
        request.method := "PUT";
        request.path_1 := "cep";
        request.path_2 := "smartrules";
        request.path_3 := "982769521";
        request.tenantId := "t106494906";
        request.username := "service_smartrule";
        request.channel := "incoming_rest_response_channel";
        request.body := {
            <any>"id": <any>"982769521",
            "cepModuleId": "982769521",
            "name": "Executes an operation when alarm is received",
            "ruleTemplateName": "thresholdSmartRule",
            "enabled": true,
            "enabledSources": ["722771371"],
            "type": "c8y_SmartRule",
            "config": {
                <any>"alarmType": <any>"My_Type",
                "alarmText": "Threshold exceeded",
                "kpiId": "102769516"
            }
        };
        request.userRoles := {IncomingREST.CEP_MANAGEMENT_ADMIN:IncomingREST.CEP_MANAGEMENT_ADMIN};

        on wait(1.0) {
            string method;
            for method in Methods {
                request.requestId := integer.getUnique();
                request.method := method;
                route request;
			}
        }
    }

    action responseListener {
        monitor.subscribe("incoming_rest_response_channel");
        on all IncomingRESTResponse() as resp {
            log "IncomingREST request received response " + resp.toString() at INFO;
        }
    }

}
