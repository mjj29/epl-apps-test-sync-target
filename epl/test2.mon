
using com.apama.cumulocity.IncomingREST;
using com.apama.cumulocity.IncomingRESTResponse;

monitor SmartRuleConcurrencyTester_2 {

    action onload {

        spawn responseListener() to context("foo3");

        IncomingREST request := new IncomingREST;
        request.method := "PUT";
        request.path_1 := "cep";
        request.path_2 := "smartrules";
        request.path_3 := "602771388";
        request.tenantId := "t106494906";
        request.username := "service_smartrule";
        request.channel := "incoming_rest_response_channel";
        request.body := {
            <any>"id": <any>"602771388",
            "cepModuleId": "602771388",
            "name": "Executes an operation when alarm is received",
            "ruleTemplateName": "thresholdSmartRule",
            "enabled": false,
            "enabledSources": ["722771371"],
            "type": "c8y_SmartRule",
            "config": {
                <any>"alarmType": <any>"threshold_Type",
                "alarmText": "Threshold exceeded",
                "kpiId": "102769516"
            }
        };
        request.userRoles := {IncomingREST.CEP_MANAGEMENT_ADMIN:IncomingREST.CEP_MANAGEMENT_ADMIN};

        on wait(1.0) {
            integer count := 0;
            while count < 10 {
                count := count + 1;
                request.requestId := integer.getUnique();
                dictionary <any , any> tmp := < dictionary<any , any> > request.body;
                if(count % 2  = 0 ) {
                	tmp["enabled"] := true;
                }
                else {
                    tmp["enabled"] := false;
                }
                request.body := tmp;
                route request;
            }
        }
    }

    action responseListener {
        monitor.subscribe("incoming_rest_response_channel");
        on all IncomingRESTResponse() as resp {
            log "IncomingREST request received response " + resp.toString() at INFO;
        }
    }
}
