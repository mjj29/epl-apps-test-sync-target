
using com.apama.cumulocity.IncomingREST;
using com.apama.cumulocity.IncomingRESTResponse;

monitor MultiSmartRuleConcurrencyTester {

    action onload {

        spawn responseListener() to context("foo_rule");

        IncomingREST request2 := new IncomingREST;
        request2.method := "PUT";
        request2.path_1 := "cep";
        request2.path_2 := "smartrules";
        request2.path_3 := "502769532";
        request2.tenantId := "t106494906";
        request2.username := "service_smartrule";
        request2.channel := "incoming_rest_response_channel";
        request2.body := {
            <any>"id": <any>"502769532",
            "cepModuleId": "502769532",
            "name": "On geofence create alarm",
            "ruleTemplateName": "onGeofenceCreateAlarm",
            "enabled": true,
            "enabledSources": ["722771371"],
            "type": "c8y_SmartRule",
            "triggerAlarmOn": "entering",
            "config": {
                <any>"alarmType": <any>"onGeofenceCreateAlarm",
                "alarmText": "Geofence violation",
                "alarmSeverity": "MAJOR",
                "triggerAlarmOn": "entering",
                "geofence": [
                    {
                        "lat": 0,
                        "lng": 0
                    },
                    {
                        "lat": 0,
                        "lng": 4
                    },
                    {
                        "lat": 4,
                        "lng": 4
                    },
                    {
                        "lat": 4,
                        "lng": 0
                    }
                ] 
            }            
        };
        request2.userRoles := {IncomingREST.CEP_MANAGEMENT_ADMIN:IncomingREST.CEP_MANAGEMENT_ADMIN};

        IncomingREST request3 := new IncomingREST;
        request3.method := "PUT";
        request3.path_1 := "cep";
        request3.path_2 := "smartrules";
        request3.path_3 := "962770388";
        request3.tenantId := "t106494906";
        request3.username := "service_smartrule";
        request3.channel := "incoming_rest_response_channel";
        request3.body := {
            <any>"id": <any>"962770388",
            "cepModuleId": "962770388",
            "name": "Executes an operation when alarm is received",
            "ruleTemplateName": "onAlarmExecuteOperation",
            "enabled": true,
            "enabledSources": ["722771371"],
            "type": "c8y_SmartRule",
            "config": {
                <any>"alarmType": <any>"onGeofenceCreateAlarm",
                "operation" :  {
                    <any>"c8y_Restart": <any>"dummy",
                   <any> "description": <any>"Restart device"
                }
            }       
        };
        request3.userRoles := {IncomingREST.CEP_MANAGEMENT_ADMIN:IncomingREST.CEP_MANAGEMENT_ADMIN};

        IncomingREST request4 := new IncomingREST;
        request4.method := "PUT";
        request4.path_1 := "cep";
        request4.path_2 := "smartrules";
        request4.path_3 := "782770390";
        request4.tenantId := "t106494906";
        request4.username := "service_smartrule";
        request4.channel := "incoming_rest_response_channel";
        request4.body := {
            <any>"id": <any>"782770390",
            "cepModuleId": "782770390",
            "name": "threshold SmartRule",
            "ruleTemplateName": "explicitThresholdSmartRule",
            "enabled": true,
            "enabledSources": ["722771371"],
            "type": "c8y_SmartRule",
            "config": {
                <any>"alarmType": <any>"explicit_threshold_alarm",
                "alarmText": "ExplicitThreshold exceeded",
                "explicit": true,
                "fragment": "TestFragment",
                "series" : "TestSeries",
                "redRangeMax": 100,
                "redRangeMin": 80
            }
        };
        request4.userRoles := {IncomingREST.CEP_MANAGEMENT_ADMIN:IncomingREST.CEP_MANAGEMENT_ADMIN};


        on wait(1.0) {
            integer count := 0;
            while count < 10 {
                count := count + 1;
                request2.requestId := integer.getUnique();
                route request2;
            }
        }

        on wait(1.0) {
            integer count := 0;
            while count < 10 {
                count := count + 1;
                request3.requestId := integer.getUnique();                
                route request3;
            }
        }

        on wait(1.0) {
            integer count := 0;
            while count < 10 {
                count := count + 1;
                request4.requestId := integer.getUnique();
                route request4;
            }
        }
    }

    action responseListener {
        monitor.subscribe("incoming_rest_response_channel");
        on all IncomingRESTResponse() as resp {
            log "IncomingREST request received response " + resp.toString() at INFO;
        }
    }

}
