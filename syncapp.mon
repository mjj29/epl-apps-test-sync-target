
using com.apama.cumulocity.ManagedObject;
using com.apama.util.AnyExtractor;
using com.apama.json.JSONPlugin;
using com.apama.functional.Fn;
using com.apama.functional.Functional;
using com.apama.cumulocity.FindTenantOption;
using com.apama.cumulocity.FindTenantOptionResponse;
using com.apama.cumulocity.TenantOption;
using com.softwareag.connectivity.httpclient.HttpTransport;
using com.softwareag.connectivity.httpclient.HttpOptions;
using com.softwareag.connectivity.httpclient.Request;
using com.softwareag.connectivity.httpclient.Response;

event Base64
{
	constant string b64chars := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	constant string a7chars := " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
	static action decode4(string base64, integer start, integer end) returns string
	{
		integer b1 := 0;
		if start <= end { b1 := b64chars.find(base64.substring(start, start+1)); }
		integer b2 := 0;
		if start+1 <= end { b2 := b64chars.find(base64.substring(start+1, start+2)); }
		integer b3 := 0;
		if start+2 <= end { b3 := b64chars.find(base64.substring(start+2, start+3)); }
		integer b4 := 0;
		if start+3 <= end { b4 := b64chars.find(base64.substring(start+3, start+4)); }

		integer c1 := (b1<<2)+(b2>>4);
		integer c2 := ((b2 and 15)<<4) + (b3>>2);
		integer c3 := b4+((b3 and 3)<<6);

		string rv := "";
		if c1 >=32 and c1 <= 127  { rv := rv+a7chars.substring(c1-32,c1-31); }
		if c2 >=32 and c2 <= 127  { rv := rv+a7chars.substring(c2-32,c2-31); }
		if c3 >=32 and c3 <= 127 { rv := rv+a7chars.substring(c3-32,c3-31); }
		return rv;
	}
	static action decode(string base64) returns string
	{
		string s := "";
		integer i := 0;
		integer l := base64.length();
		while i < l {
			integer remaining := i+4;
			if remaining >= l { remaining := l-1; }
			s := s + decode4(base64, i, remaining);
			i := i + 4;
		}
		return s;
	}
}

event GitUpdate
{
	static action create(string repo, string auth, string branch, HttpTransport http, sequence<optional<string>> latestHash) returns GitUpdate
	{
		return <GitUpdate> Fn.setFields(new GitUpdate, [<any>repo, auth, branch, http, latestHash]);
	}
	string repo;
	string auth;
	string branch;
	HttpTransport http;	
	sequence<optional<string>> latestHash;
	dictionary<string,string> commit;
	string headcommithash;

	action getWriteResponse(string name, integer requestId) returns integer
	{
		on Response(id=requestId) as r {
			log "Got write response "+r.toString();
			commit[name] := r.payload.getString("sha");
			if commit.size() = 3 { doCommit(); }
		}
		return requestId;
	}
	action writeFile(string name, string data) returns integer
	{
		log "Writing file "+name+" ("+data+")";
		Request r := createRestAPIQuery("POST", "/git/blobs", {"content":data, "encoding":"utf-8"});
		send r to r.channel;
		return r.id;
	}
	action pathNotInCommits(any treeentry) returns boolean
	{
		AnyExtractor ae := AnyExtractor(treeentry);
		return not commit.hasKey(ae.getStringOr("path", ""));
	}
	static action createTreeEntry(string path, string hash) returns any
	{
		return { 
			"path": path,
			"mode": "100644",
			"type": "blob",
			"sha": hash
			};
	}
	action doCommit()
	{
		log "Committing to "+repo+": "+commit.toString();
		createRestAPIQuery("GET", "/git/ref/heads/"+branch, new any).execute(getHeadRef);
	}
	action getHeadRef(Response r)
	{
		log "Got response: "+r.toString();
		string headrefhash := r.payload.getString("object.sha");
		string headrefurl := r.payload.getString("object.url");
		createRestAPIQuery("GET", headrefurl, new any).execute(getHeadCommit);
	}
	action getHeadCommit(Response r)
	{
		log "Got response: "+r.toString();
		headcommithash := r.payload.getString("sha");
		string headtreehash := r.payload.getString("tree.sha");
		string headtreeurl := r.payload.getString("tree.url");
		createRestAPIQuery("GET", headtreeurl+"?recursive=1", new any).execute(createTree);
	}
	action createTree(Response r)
	{
		log "Got response: "+r.toString();
		sequence<any> treedata := <sequence<any>> Functional(r.payload.getAny("tree")).filter(Fn.isNot(Fn.partial(Fn.fieldEqual, ["type", "tree"]))).filter(pathNotInCommits).get();
		any _ := Functional(commit).filter(Fn.isNot(Fn.isEmpty)).map(createTreeEntry).map(treedata.append);
		createRestAPIQuery("POST", "/git/trees", {"tree":treedata}).execute(createCommit);
	}
	action createCommit(Response r)
	{
		log "Got response: "+r.toString();
		string newtreehash := r.payload.getString("sha");
		createRestAPIQuery("POST", "/git/commits", {"message":<any>"Update C8Y", "parents":[headcommithash], "tree":newtreehash, "author":{"name":"EPL Apps", "email":"automatic.eplapps@streaminganalytics.c8y"}}).execute(updateHEAD);
	}
	action updateHEAD(Response r)
	{
		log "Got response: "+r.toString();
		string newcommithash := r.payload.getString("sha");
		createRestAPIQuery("PATCH", "/git/refs/heads/"+branch, {"sha":<any>newcommithash, "force":true}).execute(complete);
	}
	action complete(Response r)
	{
		log "Completed creating commit: "+r.toString();
		latestHash[0] := r.payload.getString("object.sha");
	}
	action createRestAPIQuery(string method, string path, any content) returns Request
	{
		log "createRequestAPIQuery("+method+", "+path.replaceAll(repo, "")+", "+content.toString()+")";
		Request req := http.createRequest(method, path.replaceAll(repo, ""), content, <HttpOptions>Fn.setFields(new HttpOptions, {"headers":{"Accept":"application/vnd.github+json", "Authorization":auth}}));
		req.id := integer.incrementCounter("com.softwareag.connectivity.httpclient.HTTPClientGeneric"); 
		return req;
	}
	
	action checkForCommits()
	{
		createRestAPIQuery("GET", "/git/ref/heads/"+branch, new any).execute(checkLatestHash);
	}
	action checkLatestHash(Response r)
	{
		string remoteHash := r.payload.getString("object.sha");
		ifpresent latestHash[0] as h {
			log "latestHash="+h+", remoteHash="+remoteHash;
			if remoteHash != h {
				updateFromGit(remoteHash, r.payload.getString("object.url"));
			}
		} else {
			log "Current hash unset, checking";
			updateFromGit(remoteHash, r.payload.getString("object.url"));
		}
		latestHash[0] := remoteHash;
	}
	action updateFromGit(string headrefhash, string headrefurl)
	{
		createRestAPIQuery("GET", headrefurl, new any).execute(getHeadCommitForUpdate);
	}
	action getHeadCommitForUpdate(Response r)
	{
		log "Got response: "+r.toString();
		headcommithash := r.payload.getString("sha");
		string headtreehash := r.payload.getString("tree.sha");
		string headtreeurl := r.payload.getString("tree.url");
		createRestAPIQuery("GET", headtreeurl+"?recursive=1", new any).execute(updateFromTree);
	}
	action updateFromTree(Response r)
	{
		log "Got response: "+r.toString();
		Functional tree := Functional(r.payload.getAny("tree"));
		any _ := tree.map(AnyExtractor.create).filter(Fn.partial(pathMatches, "epl/.*.mon")).map(Fn.partial(updateEPLFileFromGit, [tree.get()]));
		_ := tree.map(AnyExtractor.create).filter(Fn.partial(pathMatches, "model/.*.json")).map(Fn.partial(updateABModelFromGit, [tree.get()]));
	}
	static action pathMatches(string regex, AnyExtractor data) returns boolean
	{
		return data.getString("path").matches(regex);
	}
	action updateEPLFileFromGit(any tree, AnyExtractor eplfile)
	{
		log "Updating EPLFile from "+eplfile.toString();
	}
	action updateABModelFromGit(any tree, AnyExtractor model)
	{
		log "Updating AB Model from "+model.toString();
	}
}

event GitHandler
{
	static action create(string owner, string repo, string PAT, string branch) returns GitHandler
	{
		return <GitHandler> Fn.setFields(new GitHandler, {
			"repo":<any>("https://api.github.com/repos/"+owner+"/"+repo),
			"auth":"Bearer "+PAT,
			"branch":branch,
			"http":HttpTransport.getOrCreateWithConfigurations("api.github.com", 443, {HttpTransport.CONFIG_TLS: "true", HttpTransport.CONFIG_BASE_PATH: "/repos/"+owner+"/"+repo}),
			"latestHash":[new optional<string>]
			});
	}
	string repo;
	string auth;
	string branch;
	HttpTransport http;
	sequence<optional<string>> latestHash;

	action updateEPLFile(string name, string contents, string description, string state)
	{
		GitUpdate update := GitUpdate.create(repo, auth, branch, http, latestHash);
		any _ := Functional({
			"epl/"+name+".mon":contents,
			"epl/"+name+".state": state,
			"epl/"+name+".txt": description
		})
			.map(update.writeFile)
			.map(update.getWriteResponse);
			//.waitForAllCompleted("com.softwareag.connectivity.httpclient.Response", "id", update.doCommit);
	}

	action updateABModel(string name, string model, string description, string state)
	{
		GitUpdate update := GitUpdate.create(repo, auth, branch, http, latestHash);
		any _ := Functional({
			"model/"+name+".json": model,
			"model/"+name+".state": state,
			"model/"+name+".txt": description
		})
			.map(update.writeFile)
			.map(update.getWriteResponse);
			//.waitForAllCompleted("com.softwareag.connectivity.httpclient.Response", "id", update.doCommit);
	}

	action startHandler()
	{
		monitor.subscribe(ManagedObject.SUBSCRIBE_CHANNEL);
		on all ManagedObject(type="apama_eplfile") as a {
			AnyExtractor ae := AnyExtractor(a.params);
			if a.name != "App update logger" {
				updateEPLFile(a.name, ae.getStringOr("apama_eplfile.contents", ""), ae.getStringOr("apama_eplfile.description", ""), ae.getStringOr("apama_eplfile.state", "")); 
			}
		}
		on all ManagedObject(type="c8y_PublicAnalyticsBuilderModel") as a {
			AnyExtractor ae := AnyExtractor(a.params);			
			updateABModel(a.name, JSONPlugin.toJSON(a.params.getOr("builderModel", new dictionary<any, any>)), ae.getStringOr("description", ""), JSONPlugin.toJSON({"mode":ae.getStringOr("mode", ""), "modeProperties":ae.getStringOr("modeProperties", ""), "state":ae.getStringOr("state", "")}));
		}
		on all wait(10.0) {
			GitUpdate.create(repo, auth, branch, http, latestHash).checkForCommits();			
		}
		GitUpdate.create(repo, auth, branch, http, latestHash).checkForCommits();
	}

}

monitor GitHandlerMonitor {
	action onload() {
		monitor.subscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
		on FindTenantOptionsResponse(reqId=Fn.sendToChannel(FindTenantOptions.SEND_CHANNEL, Fn.setEntries(new FindTenantOptions, {"reqId":Util.generateReqId(), "category":"github"}).reqId)) as options {
			TenantOption opt;
			string owner="";
			string repository="";
			string pat="";
			string branch="";
			for opt in options.options {
				if opt.key = "owner" { owner=opt.value; }
				if opt.key = "repo" { repository=opt.value; }
				if opt.key = "PAT" { pat=opt.value; }
				if opt.key = "branch" { branch=opt.value; }
			}
			if owner!="" and repository!="" and pat!="" and branch!="" {
				GitHandler.create(owner, repository, pat, branch).startHandler();
			} else if owner!="" or repository!="" or pat!="" or branch!="" {
				log "You must specify tenant options for github.owner, github.repo, github.branch and github.PAT" at ERROR;
			}
		}
	}
}
